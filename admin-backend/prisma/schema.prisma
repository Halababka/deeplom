generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Doctor {
  id              Int        @id @default(autoincrement())
  name            String
  education       String?
  educationPlaces String?
  courses         String?
  specialty       String
  experience      Int?
  avatar          File?      @relation("DoctorAvatar", fields: [avatarId], references: [id])
  avatarId        Int?       @unique
  photos          File[]     @relation("DoctorPhotos")
  certificates    File[]     @relation("DoctorCertificates")
  categories      Category[]
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  parentId Int? // Связь с родительской категорией
  only     Boolean    @default(false) // Указывает, что категория второго уровня без родительской категории
  parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryParent")
  services Service[]
  doctors  Doctor[]
}

model Service {
  id         Int       @id @default(autoincrement())
  name       String
  popular    Boolean   @default(false)
  price      Int?
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  isAdmin  Boolean @default(false)
}

model File {
  id                    Int      @id @default(autoincrement())
  name                  String?
  url                   String
  doctorAvatar          Doctor?  @relation("DoctorAvatar")
  doctorPhotos          Doctor?  @relation("DoctorPhotos", fields: [doctorPhotosId], references: [id])
  doctorPhotosId        Int?
  doctorCertificates    Doctor?  @relation("DoctorCertificates", fields: [doctorCertificatesId], references: [id])
  doctorCertificatesId  Int?
  companyMainPhoto      Company? @relation("CompanyMainPhoto")
  companyPhotos         Company? @relation("CompanyPhotos", fields: [companyPhotosId], references: [id])
  companyCertificates   Company? @relation("CompanyCertificates", fields: [companyCertificatesId], references: [id])
  companyPhotosId       Int?
  companyCertificatesId Int?
  Company               Company? @relation(fields: [companyId], references: [id])
  companyId             Int?
}

model Company {
  id              Int    @id @default(autoincrement())
  name            String
  fullName        String
  services        String
  slogan          String
  socialLinks     String
  legalAddress    String
  ogrnDetails     String
  ogrn            String
  inn             String
  legalInn        String
  email           String
  phone           String
  licence         String
  address         String
  schedule        String
  description     String
  fullDescription String
  mainPhoto       File?  @relation("CompanyMainPhoto", fields: [mainPhotoId], references: [id])
  mainPhotoId     Int?   @unique
  photos          File[] @relation("CompanyPhotos")
  certificates    File[] @relation("CompanyCertificates")
  File            File[]
}
